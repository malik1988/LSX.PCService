<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cave.TcpServer</name>
    </assembly>
    <members>
        <member name="T:Cave.Net.BufferEventArgs">
            <summary>
            Provides buffer information
            </summary>
        </member>
        <member name="P:Cave.Net.BufferEventArgs.Buffer">
            <summary>
            Gets the full buffer instance
            </summary>
        </member>
        <member name="P:Cave.Net.BufferEventArgs.Offset">
            <summary>
            Gets the start offset of data in <see cref="P:Cave.Net.BufferEventArgs.Buffer"/>
            </summary>
        </member>
        <member name="P:Cave.Net.BufferEventArgs.Length">
            <summary>
            Gets the length of data in <see cref="P:Cave.Net.BufferEventArgs.Buffer"/>
            </summary>
        </member>
        <member name="P:Cave.Net.BufferEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the buffer has been handled. Further processing will be skipped.
            </summary>
        </member>
        <member name="M:Cave.Net.BufferEventArgs.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cave.Net.BufferEventArgs"/> class.
            </summary>
            <param name="buffer">buffer instance</param>
            <param name="offset">offset of data</param>
            <param name="length">length of data</param>
        </member>
        <member name="T:Cave.Net.ITcpServer">
            <summary>
            Provides a TcpServer interface
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Cave.Net.ITcpServer.Listen(System.Net.IPEndPoint)">
            <summary>Listens at the specified end point.</summary>
            <param name="endPoint">The end point.</param>
            <exception cref="T:System.ObjectDisposedException">TcpSocketServer</exception>
        </member>
        <member name="M:Cave.Net.ITcpServer.Listen(System.Int32)">
            <summary>Listens at the specified port.</summary>
            <param name="port">The port.</param>
            <exception cref="T:System.ObjectDisposedException">TcpSocketServer</exception>
        </member>
        <member name="M:Cave.Net.ITcpServer.Close">
            <summary>Closes the server and performs shutdown on all clients.</summary>
        </member>
        <member name="P:Cave.Net.ITcpServer.AcceptBacklog">
            <summary>Gets or sets the maximum length of the pending connections queue.</summary>
            <value>The maximum length of the pending connections queue.</value>
            <exception cref="T:System.InvalidOperationException">Socket is already listening!</exception>
        </member>
        <member name="P:Cave.Net.ITcpServer.BufferSize">
            <summary>Gets or sets the size of the buffer used when receiving data.</summary>
            <value>The size of the buffer.</value>
            <exception cref="T:System.InvalidOperationException">Socket is already listening!</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">value</exception>
        </member>
        <member name="P:Cave.Net.ITcpServer.ReceiveTimeout">
            <summary>Gets or sets the amount of time, in milliseconds, thata read operation blocks waiting for data.</summary>
            <value>A Int32 that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, <see cref="F:System.Threading.Timeout.Infinite"/>, specifies that the read operation does not time out.</value>
        </member>
        <member name="P:Cave.Net.ITcpServer.SendTimeout">
            <summary>Gets or sets the amount of time, in milliseconds, thata write operation blocks waiting for data.</summary>
            <value>A Int32 that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, <see cref="F:System.Threading.Timeout.Infinite"/>, specifies that the write operation does not time out.</value>
        </member>
        <member name="P:Cave.Net.ITcpServer.IsListening">
            <summary>Gets a value indicating whether this instance is listening.</summary>
            <value>
            <c>true</c> if this instance is listening; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cave.Net.TcpAsyncClient">
            <summary>
            Provides an async tcp client implementation
            </summary>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.ReadCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>Gets called whenever a read is completed.</summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.InitializeServer(Cave.Net.ITcpServer,System.Net.Sockets.Socket)">
            <summary>
            Initializes the client for use with the specified <paramref name="server"/> instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Reader already started!</exception>
            <param name="server">Server instance this client belongs to.</param>
            <param name="socket">Socket instance this client uses.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.StartReader(System.Int32)">
            <summary>
            Calls the <see cref="M:Cave.Net.TcpAsyncClient.OnConnect"/> function and starts the async socket reader.
            </summary>
            <param name="bufferSize">The <see cref="P:System.Net.Sockets.Socket.SendBufferSize"/> and <see cref="P:System.Net.Sockets.Socket.ReceiveBufferSize"/> to be used.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.OnConnect">
            <summary>
            Calls the <see cref="E:Cave.Net.TcpAsyncClient.Connected"/> event (if set).
            </summary>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.OnDisconnect">
            <summary>
            Calls the <see cref="E:Cave.Net.TcpAsyncClient.Disconnected"/> event (if set).
            </summary>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.OnReceived(Cave.Net.BufferEventArgs)">
            <summary>
            Calls the <see cref="E:Cave.Net.TcpAsyncClient.Received"/> event (if set).
            </summary>
            <remarks>
            You can set <see cref="P:Cave.Net.BufferEventArgs.Handled"/> to true when overrideing this function or within <see cref="E:Cave.Net.TcpAsyncClient.Received"/>
            to skip adding data to the <see cref="P:Cave.Net.TcpAsyncClient.Stream"/> and <see cref="P:Cave.Net.TcpAsyncClient.ReceiveBuffer"/>.
            </remarks>
            <param name="e">The buffer event arguments.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.OnBuffered">
            <summary>
            Calls the <see cref="E:Cave.Net.TcpAsyncClient.Buffered"/> event (if set).
            </summary>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.OnError(System.Exception)">
            <summary>Calls the Error event (if set) and closes the connection.</summary>
            <param name="ex">The exception (in most cases this will be a <see cref="T:System.Net.Sockets.SocketException"/></param>
        </member>
        <member name="E:Cave.Net.TcpAsyncClient.Connected">
            <summary>
            Event to be called after the connection was established
            </summary>
        </member>
        <member name="E:Cave.Net.TcpAsyncClient.Disconnected">
            <summary>
            Event to be called after the connection was closed
            </summary>
        </member>
        <member name="E:Cave.Net.TcpAsyncClient.Received">
            <summary>
            Event to be called after a buffer was received
            </summary>
        </member>
        <member name="E:Cave.Net.TcpAsyncClient.Buffered">
            <summary>
            Event to be called after a buffer was received and was not handled by the <see cref="E:Cave.Net.TcpAsyncClient.Received"/> event
            </summary>
        </member>
        <member name="E:Cave.Net.TcpAsyncClient.Error">
            <summary>
            Event to be called after an error was encountered
            </summary>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cave.Net.TcpAsyncClient"/> class.
            </summary>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.Connect(System.String,System.Int32,System.Int32)">
            <summary>
            Connects to the specified hostname and port
            </summary>
            <param name="hostname">hostname to resolve</param>
            <param name="port">port to connect to</param>
            <param name="bufferSize">tcp buffer size in bytes</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.ConnectAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Connects to the specified hostname and port
            </summary>
            <param name="hostname">hostname to resolve</param>
            <param name="port">port to connect to</param>
            <param name="bufferSize">tcp buffer size in bytes</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.Connect(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Connects to the specified address and port
            </summary>
            <param name="address">ip address to connect to</param>
            <param name="port">port to connect to</param>
            <param name="bufferSize">tcp buffer size in bytes</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Performs an asynchonous connect to the specified address and port
            </summary>
            <remarks>
            This function returns immediately.
            Results are delivered by the <see cref="E:Cave.Net.TcpAsyncClient.Error"/> / <see cref="E:Cave.Net.TcpAsyncClient.Connected"/> events.
            </remarks>
            <param name="address">ip address to connect to</param>
            <param name="port">port to connect to</param>
            <param name="bufferSize">tcp buffer size in bytes</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.Connect(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Connects to the specified address and port
            </summary>
            <param name="endPoint">ip endpoint to connect to</param>
            <param name="bufferSize">tcp buffer size in bytes</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.ConnectAsync(System.Net.EndPoint,System.Int32)">
            <summary>
            Performs an asynchonous connect to the specified address and port
            </summary>
            <remarks>
            This function returns immediately.
            Results are delivered by the <see cref="E:Cave.Net.TcpAsyncClient.Error"/> / <see cref="E:Cave.Net.TcpAsyncClient.Connected"/> events.
            </remarks>
            <param name="endPoint">ip endpoint to connect to</param>
            <param name="bufferSize">tcp buffer size in bytes</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.GetStream">
            <summary>Gets the stream.</summary>
            <returns>Returns the <see cref="P:Cave.Net.TcpAsyncClient.Stream"/> instance used to send and receive data.</returns>
            <remarks>This function and access to all stream functions are threadsafe.</remarks>
            <exception cref="T:System.InvalidOperationException">Not connected!</exception>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.SendAsync(System.Byte[],System.Action)">
            <summary>
            Sends data asynchronously to a connected remote.
            </summary>
            <remarks>
            This function is threadsafe, howeverc alling this method more than one time prior completion may result in a
            different byte sequence at the receiver!
            </remarks>
            <remarks>This function is threadsafe.</remarks>
            <param name="buffer">An array of bytes to be send.</param>
            <param name="callback">Callback method to be called after completion.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.SendAsync(System.Byte[],System.Int32,System.Action)">
            <summary>
            Sends data asynchronously to a connected remote
            </summary>
            <remarks>
            This function is threadsafe, howeverc alling this method more than one time prior completion may result in a
            different byte sequence at the receiver!
            </remarks>
            <param name="buffer">An array of bytes to be send.</param>
            <param name="length">The number of bytes.</param>
            <param name="callback">Callback method to be called after completion.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.SendAsync(System.Byte[],System.Int32,System.Int32,System.Action)">
            <summary>
            Sends data asynchronously to a connected remote
            </summary>
            <remarks>
            This function is threadsafe, howeverc alling this method more than one time prior completion may result in a
            different byte sequence at the receiver!
            </remarks>
            <param name="buffer">An array of bytes to be send.</param>
            <param name="offset">The start offset at the byte array.</param>
            <param name="length">The number of bytes.</param>
            <param name="callback">Callback method to be called after completion.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.Send(System.Byte[])">
            <summary>
            Sends data to a connected remote.
            </summary>
            <remarks>This function is threadsafe.</remarks>
            <param name="buffer">An array of bytes to be send.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.Send(System.Byte[],System.Int32)">
            <summary>
            Sends data to a connected remote
            </summary>
            <remarks>This function is threadsafe</remarks>
            <param name="buffer">An array of bytes to be send.</param>
            <param name="length">The number of bytes.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends data to a connected remote
            </summary>
            <remarks>This function is threadsafe</remarks>
            <param name="buffer">An array of bytes to be send.</param>
            <param name="offset">The start offset at the byte array.</param>
            <param name="length">The number of bytes.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.Close">
            <summary>Closes this instance gracefully.</summary>
            <remarks>
            To ensure unsent data is flushed when using <see cref="P:Cave.Net.TcpAsyncClient.Stream"/> use the <see cref="M:Cave.Net.TcpAsyncStream.Close"/> method or <see cref="M:Cave.Net.TcpAsyncStream.Flush"/> first.
            <para>This function is threadsafe.</para>
            </remarks>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by this instance and optionally releases the managed resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.Dispose">
            <summary>Releases unmanaged and managed resources.</summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.Stream">
            <summary>Gets the raw TCP stream used to send and receive data.</summary>
            <remarks>This function and access to all stream functions are threadsafe</remarks>
            <value>The TCP stream instance.</value>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.ReceiveBuffer">
            <summary>Gets the receive buffer.</summary>
            <value>The receive buffer.</value>
            <remarks>Use lock on this buffer to ensure thread safety when using concurrent access to the <see cref="P:Cave.Net.TcpAsyncClient.Stream"/> property, <see cref="M:Cave.Net.TcpAsyncClient.GetStream"/> function and/or <see cref="E:Cave.Net.TcpAsyncClient.Received"/> callbacks.</remarks>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.ConnectTimeout">
            <summary>Gets or sets the amount of time, in milliseconds, that a connect operation blocks waiting for data.</summary>
            <value>A Int32 that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, <see cref="F:System.Threading.Timeout.Infinite"/>, specifies that the connect operation does not time out.</value>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.IsConnected">
            <summary>Gets a value indicating whether the client is connected.</summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.BytesReceived">
            <summary>Gets the number of bytes received.</summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.BytesSent">
            <summary>Gets the number of bytes sent.</summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.PendingAsyncSends">
            <summary>
            Gets the number of active async send tasks
            </summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.RemoteEndPoint">
            <summary>Gets the remote end point.</summary>
            <value>The remote end point.</value>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.LocalEndPoint">
            <summary>Gets the local end point.</summary>
            <value>The local end point.</value>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.ReceiveTimeout">
            <summary>Gets or sets the amount of time, in milliseconds, that a read operation blocks waiting for data.</summary>
            <value>A Int32 that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, <see cref="F:System.Threading.Timeout.Infinite"/>, specifies that the read operation does not time out.</value>
            <remarks>This cannot be accessed prior <see cref="M:Cave.Net.TcpAsyncClient.Connect(System.String,System.Int32,System.Int32)"/></remarks>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.SendTimeout">
            <summary>Gets or sets the amount of time, in milliseconds, that a write operation blocks waiting for transmission.</summary>
            <value>A Int32 that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, <see cref="F:System.Threading.Timeout.Infinite"/>, specifies that the write operation does not time out.</value>
            <remarks>This cannot be accessed prior <see cref="M:Cave.Net.TcpAsyncClient.Connect(System.String,System.Int32,System.Int32)"/></remarks>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.DeadLockTimeout">
            <summary>
            Gets or sets the dead lock timeout. This is the maximum time thread safe functions wait for acquiring the socket lock.
            </summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.BufferSize">
            <summary>
            Gets the buffer size used.
            </summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.Ttl">
            <summary>
            Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the Socket.
            </summary>
            <remarks>This cannot be accessed prior <see cref="M:Cave.Net.TcpAsyncClient.Connect(System.String,System.Int32,System.Int32)"/></remarks>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.NoDelay">
            <summary>Gets or sets a value indicating whether the stream Socket is using the Nagle algorithm.</summary>
            <value><c>true</c> if the Socket uses the Nagle algorithm; otherwise, <c>false</c>.</value>
            <remarks>This cannot be accessed prior <see cref="M:Cave.Net.TcpAsyncClient.Connect(System.String,System.Int32,System.Int32)"/></remarks>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.LingerState">
            <summary>
            Gets or sets a value that specifies whether the Socket will delay closing a socket in an attempt to send all pending data.
            </summary>
            <remarks>This cannot be accessed prior <see cref="M:Cave.Net.TcpAsyncClient.Connect(System.String,System.Int32,System.Int32)"/></remarks>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient.Server">
            <summary>
            Gets the server instance this client belongs to. May be <c>null</c>.
            </summary>
        </member>
        <member name="M:Cave.Net.TcpAsyncClient.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>tcp://remoteip:port</returns>
        </member>
        <member name="T:Cave.Net.TcpAsyncClient`1">
            <summary>
            Provides an async tcp client implementation for typed server instances
            </summary>
            <typeparam name="TServer">The server intance type. This is used with <see cref="T:Cave.Net.TypedTcpServer`1"/></typeparam>
        </member>
        <member name="P:Cave.Net.TcpAsyncClient`1.Server">
            <summary>
            Gets the server instance this client belongs to. May be <c>null</c>.
            </summary>
        </member>
        <member name="T:Cave.Net.TcpAsyncStream">
            <summary>
            Provides a stream implementation for <see cref="T:Cave.Net.TcpAsyncClient"/>
            </summary>
            <remarks>All functions of this class are threadsafe</remarks>
        </member>
        <member name="M:Cave.Net.TcpAsyncStream.#ctor(Cave.Net.TcpAsyncClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Cave.Net.TcpAsyncStream"/> class.
            </summary>
            <param name="client">Client to be used by this stream.</param>
        </member>
        <member name="P:Cave.Net.TcpAsyncStream.DirectWrites">
            <summary>
            Gets or sets a value indicating whether the stream use direct writes on the clients socket for each call to <see cref="M:Cave.Net.TcpAsyncStream.Write(System.Byte[],System.Int32,System.Int32)"/>.
            Default is false buffering all writes.
            You need to set thit to true if you use the clients <see cref="M:Cave.Net.TcpAsyncClient.Send(System.Byte[])"/> function and stream writing.
            </summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncStream.Available">
            <summary>
            Gets the number of bytes available for reading
            </summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncStream.SendBufferLength">
            <summary>
            Gets the number of bytes present at the send buffer when using <see cref="P:Cave.Net.TcpAsyncStream.DirectWrites"/> == false (default).
            </summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncStream.ReadTimeout">
            <summary>Gets or sets the amount of time, in milliseconds, that a read operation blocks waiting for data.</summary>
            <value>A Int32 that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, <see cref="F:System.Threading.Timeout.Infinite"/>, specifies that the read operation does not time out.</value>
        </member>
        <member name="P:Cave.Net.TcpAsyncStream.WriteTimeout">
            <summary>Gets or sets the amount of time, in milliseconds, that a write operation blocks waiting for transmission.</summary>
            <value>A Int32 that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, <see cref="F:System.Threading.Timeout.Infinite"/>, specifies that the write operation does not time out.</value>
        </member>
        <member name="P:Cave.Net.TcpAsyncStream.CanRead">
            <summary>
            Gets a value indicating whether the stream can be read or not. This is always true.
            </summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream can seek or not. This is always false.
            </summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncStream.CanWrite">
            <summary>
            Gets a value indicating whether the stream can be written or not. This is always true.
            </summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncStream.Length">
            <summary>
            Gets the number of bytes received (<see cref="P:Cave.Net.TcpAsyncClient.BytesReceived"/>).
            </summary>
        </member>
        <member name="P:Cave.Net.TcpAsyncStream.Position">
            <summary>
            Gets or sets the current read position at the buffers still present in memory.
            </summary>
        </member>
        <member name="M:Cave.Net.TcpAsyncStream.Flush">
            <summary>
            Waits until all buffered data is sent.
            </summary>
        </member>
        <member name="M:Cave.Net.TcpAsyncStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the the buffers. A maximum of count bytes is read but if less is available any number of bytes may be read.
            If no bytes are available the read method will block until at least one byte is available, the connection is closed or the timeout is reached.
            </summary>
            <param name="array">byte array to write data to</param>
            <param name="offset">start offset at array to begin writing at</param>
            <param name="count">number of bytes to read</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.TimeoutException">A timeout occured while waiting for incoming data. (See <see cref="P:Cave.Net.TcpAsyncStream.ReadTimeout"/>)</exception>
        </member>
        <member name="M:Cave.Net.TcpAsyncStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
        </member>
        <member name="M:Cave.Net.TcpAsyncStream.SetLength(System.Int64)">
            <summary>
            Not supported
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking.</exception>
        </member>
        <member name="M:Cave.Net.TcpAsyncStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Cave.Net.TcpAsyncStream.Close">
            <summary>
            Closes the tcp connection
            </summary>
        </member>
        <member name="T:Cave.Net.TcpServer">
            <summary>
            Provides a fast TcpServer implementation using the default TcpServerClient class.
            For own client implementations use <see cref="T:Cave.Net.TcpServer`1"/>
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:Cave.Net.TcpServerClientEventArgs`1">
            <summary>
            Provides Event Arguments for the <see cref="T:Cave.Net.TcpServer`1"/> events.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Cave.Net.TcpServerClientEventArgs`1.Client">
            <summary>Gets the client.</summary>
            <value>The client.</value>
        </member>
        <member name="M:Cave.Net.TcpServerClientEventArgs`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:Cave.Net.TcpServerClientEventArgs`1"/> class.</summary>
            <param name="client">The client.</param>
        </member>
        <member name="T:Cave.Net.TcpServerClientExceptionEventArgs`1">
            <summary>
            Provides Event Arguments for the <see cref="E:Cave.Net.TcpServer`1.ClientException"/> event.
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:Cave.Net.TcpServerClientExceptionEventArgs`1.Exception">
            <summary>
            Gets the <see cref="P:Cave.Net.TcpServerClientExceptionEventArgs`1.Exception"/> that was encountered
            </summary>
        </member>
        <member name="P:Cave.Net.TcpServerClientExceptionEventArgs`1.Client">
            <summary>Gets the client.</summary>
            <value>The client.</value>
        </member>
        <member name="M:Cave.Net.TcpServerClientExceptionEventArgs`1.#ctor(`0,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Cave.Net.TcpServerClientExceptionEventArgs`1"/> class.</summary>
            <param name="client">The client.</param>
            <param name="ex">The <see cref="P:Cave.Net.TcpServerClientExceptionEventArgs`1.Exception"/> that was encountered</param>
        </member>
        <member name="T:Cave.Net.TcpServer`1">
            <summary>
            Provides a fast TcpServer implementation
            </summary>
            <typeparam name="TClient">The type of the client.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Cave.Net.TcpServer`1.OnClientException(`0,System.Exception)">
            <summary>
            Calls the <see cref="E:Cave.Net.TcpServer`1.ClientException"/> event (if set).
            </summary>
            <param name="source">The source of the exception.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Cave.Net.TcpServer`1.OnAcceptTasksBusy">
            <summary>
            Calls the <see cref="E:Cave.Net.TcpServer`1.AcceptTasksBusy"/> event (if set).
            </summary>
        </member>
        <member name="M:Cave.Net.TcpServer`1.OnClientAccepted(`0)">
            <summary>
            Calls the <see cref="E:Cave.Net.TcpServer`1.ClientAccepted"/> event (if set).
            </summary>
            <param name="client">The client that was accepted.</param>
        </member>
        <member name="M:Cave.Net.TcpServer`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Cave.Net.TcpServer`1"/> class.</summary>
        </member>
        <member name="P:Cave.Net.TcpServer`1.ExclusiveAddressUse">
            <summary>
            Gets or sets a value indicating whether the Socket allows only one process to bind to a port or not.
            </summary>
            <remarks>
            Set to true if the Socket allows only one socket to bind to a specific port; otherwise, false.
            The default is true.
            </remarks>
        </member>
        <member name="M:Cave.Net.TcpServer`1.Listen(System.Net.IPAddress,System.Int32)">
            <summary>Listens at the specified <paramref name="address"/> and <paramref name="port"/>.</summary>
            <param name="address">The ip address to listen at.</param>
            <param name="port">The port to listen at.</param>
        </member>
        <member name="M:Cave.Net.TcpServer`1.Listen(System.Net.IPEndPoint)">
            <summary>Listens at the specified end point.</summary>
            <param name="endPoint">The end point.</param>
            <exception cref="T:System.ObjectDisposedException">TcpSocketServer</exception>
        </member>
        <member name="M:Cave.Net.TcpServer`1.Listen(System.Int32)">
            <summary>Listens at the specified port on IPv4 and IPv6 if available.</summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Cave.Net.TcpServer`1.Listen(System.Int32,System.Nullable{System.Boolean})">
            <summary>Listens at the specified port.</summary>
            <param name="port">The port.</param>
            <param name="useIPv6">Use dualstack socket. Defaults value is true.</param>
            <exception cref="T:System.ObjectDisposedException">TcpSocketServer</exception>
        </member>
        <member name="M:Cave.Net.TcpServer`1.DisconnectAllClients">
            <summary>Disconnects all clients.</summary>
        </member>
        <member name="M:Cave.Net.TcpServer`1.Close">
            <summary>Closes this instance.</summary>
        </member>
        <member name="P:Cave.Net.TcpServer`1.AcceptBacklog">
            <summary>Gets or sets the maximum number of pending connections.</summary>
            <value>The maximum length of the pending connections queue.</value>
            <remarks>On high load this should be 10 x <see cref="P:Cave.Net.TcpServer`1.AcceptThreads"/></remarks>
            <exception cref="T:System.InvalidOperationException">Socket is already listening!</exception>
        </member>
        <member name="P:Cave.Net.TcpServer`1.AcceptThreads">
            <summary>Gets or sets the number of threads used to accept connections.</summary>
            <value>The maximum length of the pending connections queue.</value>
            <exception cref="T:System.InvalidOperationException">Socket is already listening!</exception>
        </member>
        <member name="P:Cave.Net.TcpServer`1.BufferSize">
            <summary>Gets or sets the size of the buffer used when receiving data.</summary>
            <value>The size of the buffer.</value>
            <exception cref="T:System.InvalidOperationException">Socket is already listening!</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">value</exception>
        </member>
        <member name="P:Cave.Net.TcpServer`1.ReceiveTimeout">
            <summary>Gets or sets the amount of time, in milliseconds, thata read operation blocks waiting for data.</summary>
            <value>A Int32 that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, <see cref="F:System.Threading.Timeout.Infinite"/>, specifies that the read operation does not time out.</value>
        </member>
        <member name="P:Cave.Net.TcpServer`1.SendTimeout">
            <summary>Gets or sets the amount of time, in milliseconds, thata write operation blocks waiting for data.</summary>
            <value>A Int32 that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, <see cref="F:System.Threading.Timeout.Infinite"/>, specifies that the write operation does not time out.</value>
        </member>
        <member name="P:Cave.Net.TcpServer`1.LocalEndPoint">
            <summary>Gets the local end point.</summary>
            <value>The local end point.</value>
        </member>
        <member name="P:Cave.Net.TcpServer`1.IsListening">
            <summary>Gets a value indicating whether this instance is listening.</summary>
            <value>
            <c>true</c> if this instance is listening; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Cave.Net.TcpServer`1.AcceptTasksBusy">
            <summary>
            Event to be called whenever all accept tasks get busy. This may indicate declined connections attempts (due to a full backlog).
            </summary>
        </member>
        <member name="E:Cave.Net.TcpServer`1.ClientAccepted">
            <summary>
            Event to be called after a client was accepted occured
            </summary>
        </member>
        <member name="E:Cave.Net.TcpServer`1.ClientException">
            <summary>
            Event to be called after a client exception occured that cannot be handled by the clients Error event.
            </summary>
        </member>
        <member name="P:Cave.Net.TcpServer`1.Clients">
            <summary>Gets all connected clients.</summary>
            <value>The clients.</value>
        </member>
        <member name="M:Cave.Net.TcpServer`1.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by this instance and optionally releases the managed resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Cave.Net.TcpServer`1.Dispose">
            <summary>Releases unmanaged and managed resources.</summary>
        </member>
        <member name="M:Cave.Net.TcpServer`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>tcp://localip:port</returns>
        </member>
        <member name="T:Cave.Net.TypedTcpServer`1">
            <summary>
            Provides a fast TcpServer implementation using a user defined client class.
            </summary>
            <seealso cref="T:System.IDisposable" />
            <typeparam name="TClient">The TcpAsyncClient{this}implementation to be used for client instances.</typeparam>
        </member>
    </members>
</doc>
